// Generated by CoffeeScript 2.3.1
(function() {
  var N3, aat, aatFilter, debug, log, miss, nt2nq, request, unzipper, url;

  N3 = require("n3");

  miss = require("mississippi");

  request = require("request");

  unzipper = require("unzipper");

  debug = require("debug");

  log = debug("rdf-tools:getty");

  nt2nq = require("./nt2nq");

  url = "http://vocab.getty.edu/dataset/aat/explicit.zip";

  aatFilter = function(...components) {
    var c, matchAll, paths;
    matchAll = components.length === 0;
    paths = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = components.length; i < len; i++) {
        c = components[i];
        results.push(`AATOut_${c}.nt`);
      }
      return results;
    })();
    paths = paths.reduce((function(idx, p) {
      return {
        ...idx,
        [p]: true
      };
    }), {});
    return function({path}) {
      var ref;
      return matchAll || ((ref = paths[path]) != null ? ref : false);
    };
  };

  aat = function(to, filter = aatFilter(), cb) {
    var callback, extract, source;
    source = request({url});
    extract = unzipper.Parse().on("entry", function(entry) {
      if (filter(entry)) {
        log("+ %o", entry);
        return entry.pipe(to, {
          end: false
        });
      } else {
        log("- %o", entry);
        return entry.autodrain();
      }
    }).on("finish", function() {
      return to.end();
    });
    callback = function(err) {
      log(err != null ? err : to);
      if (cb) {
        return cb(err);
      }
    };
    return miss.pipe(source, extract, callback);
  };

  module.exports = {
    aat: aat,
    aatFilter: aatFilter,
    subjects: aatFilter("1Subjects"),
    hierarchy: aatFilter("1Subjects", "2Terms", "HierarchicalRels"),
    parsed: function() {
      return miss.pipeline.obj(new N3.StreamParser(), nt2nq("http://vocab.getty.edu/aat"));
    }
  };

}).call(this);

//# sourceMappingURL=getty.js.map
