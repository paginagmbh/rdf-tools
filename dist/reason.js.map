{
  "version": 3,
  "file": "reason.js",
  "sourceRoot": "..",
  "sources": [
    "lib/reason.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "path = require \"path\"\n\nmiss = require \"mississippi\"\nN3 = require \"n3\"\n{ namedNode, quad } = N3.DataFactory\n\ndefaultArgs = { format: \"N-Quads\" }\nargs = (require \"minimist\") process.argv[2..]\n\n{ format } = { defaultArgs..., args... }\n\n[ ontology ] = args._\nprocess.exit 2 unless ontology\n\nowl = require \"./owl\"\ncrm = require \"./cidoc-crm\"\n\nto = miss.pipeline.obj new N3.StreamWriter({ format }), process.stdout\ncb = (err) ->\n    console.error err if err?\n    process.exitCode = if err? then 1 else 0\n\ncidocCrm = () ->\n    ontology = await new Promise (resolve, reject) ->\n        miss.pipe crm.stream(),\n            crm.parsed(),\n            owl.model(resolve),\n            miss.to.obj((triple, _, next) -> next())\n            (err) -> reject err if err?\n\n    source = new N3.StreamParser()\n    target = new N3.StreamWriter({ format })\n\n    reasoner = miss.duplex.obj target, source\n    reasoner.on \"data\", (stmt, _, next) ->\n        { subject, predicate, object, graph } = stmt\n        for inverse of (ontology.inversed[predicate.value] ? {})\n            inverse = namedNode inverse\n            reasoner.write quad(object, inverse, subject, graph)\n\n    miss.pipe process.stdin, source, cb\n    miss.pipe target, process.stdout, cb\n\ntry\n    switch ontology\n        when \"cidoc-crm\" then cidocCrm()\n        else cb \"Unknown ontology: #{ontology}\"\ncatch err\n    cb err\n"
  ]
}