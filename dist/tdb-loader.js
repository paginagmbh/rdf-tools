// Generated by CoffeeScript 2.3.1
(function() {
  var args, backup, cp, cwd, database, databases, dest, encoding, fusekiBase, live, load, minimist, path, remove, spawn, suffix, test, xfs;

  path = require("path");

  cp = require("child_process");

  xfs = require("fs-extra");

  minimist = require("minimist");

  args = minimist(process.argv.slice(2));

  ({test} = args);

  [database] = args._;

  if (!database) {
    process.exit(1);
  }

  cwd = process.cwd();

  encoding = "utf8";

  fusekiBase = process.env.FUSEKI_BASE || cwd;

  databases = path.resolve(fusekiBase, "databases");

  spawn = function(cmd, args, opts = {}) {
    var result;
    opts = {
      cwd,
      encoding,
      stdio: "inherit",
      shell: true,
      ...opts
    };
    result = cp.spawnSync(cmd, args, opts);
    if (result.status !== 0) {
      process.exit(result.status);
    }
    return result;
  };

  [backup, dest, live] = (function() {
    var i, len, ref, results;
    ref = [".old", ".new", ""];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      suffix = ref[i];
      results.push(path.resolve(databases, `${database}${suffix}`));
    }
    return results;
  })();

  remove = function(dir) {
    return (xfs.remove(dir)).then((function() {
      return dir;
    }), (function() {
      return dir;
    }));
  };

  load = async function() {
    await remove(dest);
    await xfs.ensureDir(dest);
    spawn("tdbloader", ["--loc", dest]);
    if (!test) {
      spawn("sudo", ["systemctl", "stop", "fuseki.service"]);
      await remove(backup);
      await xfs.ensureDir(live);
      await xfs.move(live, backup);
      await xfs.move(dest, live);
      return spawn("sudo", ["systemctl", "start", "fuseki.service"]);
    }
  };

  load();

}).call(this);

//# sourceMappingURL=tdb-loader.js.map
