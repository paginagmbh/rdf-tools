{
  "version": 3,
  "file": "stream.js",
  "sourceRoot": "..",
  "sources": [
    "lib/stream.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,WAAA,EAAA,MAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA;;EAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;EAEP,IAAA,GAAO,OAAA,CAAQ,aAAR;;EACP,EAAA,GAAK,OAAA,CAAQ,IAAR;;EAEL,WAAA,GAAc;IAAE,MAAA,EAAQ;EAAV;;EACd,IAAA,GAAO,CAAC,OAAA,CAAQ,UAAR,CAAD,CAAA,CAAqB,OAAO,CAAC,IAAK,SAAlC;;EAEP,CAAA,CAAE,MAAF,EAAU,MAAV,EAAkB,KAAlB,CAAA,GAA4B,CAAE,GAAA,WAAF,EAAkB,GAAA,IAAlB,CAA5B;;EAEA,CAAE,OAAF,CAAA,GAAc,IAAI,CAAC;;EACnB,IAAA,CAAsB,OAAtB;IAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAA;;;EAEA,KAAA,GAAQ,OAAA,CAAQ,SAAR;;EACR,SAAA,GAAY,OAAA,CAAQ,aAAR;;EACZ,GAAA,GAAM,OAAA,CAAQ,OAAR;;EACN,KAAA,GAAQ,OAAA,CAAQ,SAAR;;EAER,EAAA,GAAK,IAAI,CAAC,QAAQ,CAAC,GAAd,CAAkB,EAAE,CAAC,YAAH,CAAgB,CAAE,MAAF,CAAhB,CAAlB,EAA+C,OAAO,CAAC,MAAvD;;EACL,EAAA,GAAK,QAAA,CAAC,GAAD,CAAA;IACD,IAAqB,WAArB;MAAA,OAAO,CAAC,KAAR,CAAc,GAAd,EAAA;;WACA,OAAO,CAAC,QAAR,GAAsB,WAAH,GAAa,CAAb,GAAoB;EAFtC;;AAIL,UAAO,OAAP;AAAA,SACS,WADT;MAEQ,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,MAAV,CAAA,CAAV,EAA8B,SAAS,CAAC,MAAV,CAAA,CAA9B,EAAkD,EAAlD,EAAsD,EAAtD;AADC;AADT,SAGS,KAHT;MAIQ,IAAI,CAAC,IAAL,CAAU,GAAG,CAAC,MAAJ,CAAA,CAAV,EAAwB,GAAG,CAAC,MAAJ,CAAA,CAAxB,EAAsC,EAAtC,EAA0C,EAA1C;AADC;AAHT,SAKS,OALT;MAMQ,EAAA,GAAK,IAAI,CAAC,QAAQ,CAAC,GAAd,CAAkB,KAAK,CAAC,MAAN,CAAA,CAAlB,EAAkC,EAAlC;MACL,MAAA;AAAS,gBAAO,MAAP;AAAA,eACA,UADA;mBACgB,KAAK,CAAC;AADtB,eAEA,WAFA;mBAEiB,KAAK,CAAC;AAFvB;;MAIT,KAAK,CAAC,GAAN,CAAU,EAAV,EAAc,MAAd;MACA,EAAE,CAAC,EAAH,CAAM,OAAN,EAAe,EAAf;AAPC;AALT,SAaS,GAbT;MAcQ,IAA2C,aAA3C;QAAA,EAAA,GAAK,IAAI,CAAC,QAAQ,CAAC,GAAd,CAAkB,KAAA,CAAM,KAAN,CAAlB,EAAgC,EAAhC,EAAL;;MACA,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,KAAlB,EAAyB,EAAE,CAAC,YAAH,CAAA,CAAzB,EAA4C,EAA5C,EAAgD,EAAhD;AAFC;AAbT;MAiBQ,EAAA,CAAG,CAAA,iBAAA,CAAA,CAAoB,OAApB,CAAA,CAAH;AAjBR;AAvBA",
  "sourcesContent": [
    "path = require \"path\"\n\nmiss = require \"mississippi\"\nN3 = require \"n3\"\n\ndefaultArgs = { format: \"N-Quads\" }\nargs = (require \"minimist\") process.argv[2..]\n\n{ format, subset, graph } = { defaultArgs..., args... }\n\n[ dataset ] = args._\nprocess.exit 2 unless dataset\n\nnt2nq = require \"./nt2nq\"\niconclass = require \"./iconclass\"\ngnd = require \"./gnd\"\ngetty = require \"./getty\"\n\nto = miss.pipeline.obj N3.StreamWriter({ format }), process.stdout\ncb = (err) ->\n    console.error err if err?\n    process.exitCode = if err? then 1 else 0\n\nswitch dataset\n    when \"iconclass\"\n        miss.pipe iconclass.stream(), iconclass.parsed(), to, cb\n    when \"gnd\"\n        miss.pipe gnd.stream(), gnd.parsed(), to, cb\n    when \"getty\"\n        to = miss.pipeline.obj getty.parsed(), to\n        subset = switch subset\n            when \"subjects\" then getty.subjects\n            when \"hierarchy\" then getty.hierarchy\n\n        getty.aat to, subset\n        to.on \"error\", cb\n    when \"-\"\n        to = miss.pipeline.obj nt2nq(graph), to if graph?\n        miss.pipe process.stdin, N3.StreamParser(), to, cb\n    else\n        cb \"Unknown dataset: #{dataset}\""
  ]
}