{
  "version": 3,
  "file": "tdb-loader.js",
  "sourceRoot": "..",
  "sources": [
    "lib/tdb-loader.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA;;EAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;EACP,EAAA,GAAK,OAAA,CAAQ,eAAR;;EACL,GAAA,GAAM,OAAA,CAAQ,UAAR;;EACN,QAAA,GAAW,OAAA,CAAQ,UAAR;;EAEX,IAAA,GAAO,QAAA,CAAS,OAAO,CAAC,IAAI,SAArB;;EACP,CAAA,CAAE,IAAF,CAAA,GAAW,IAAX;;EACA,CAAE,QAAF,CAAA,GAAe,IAAI,CAAC;;EACpB,KAAsB,QAAtB;IAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAA;;;EAEA,GAAA,GAAM,OAAO,CAAC,GAAR,CAAA;;EACN,QAAA,GAAW;;EAEX,UAAA,GAAa,OAAO,CAAC,GAAG,CAAC,WAAZ,IAA2B;;EACxC,SAAA,GAAY,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,WAAzB;;EAEZ,KAAA,GAAQ,QAAA,CAAC,GAAD,EAAM,IAAN,EAAY,OAAK,CAAA,CAAjB,CAAA;AACR,QAAA;IAAE,IAAA,GAAO;MAAE,GAAF;MAAO,QAAP;MAAiB,KAAA,EAAO,SAAxB;MAAmC,KAAA,EAAO,IAA1C;MAAgD,GAAA;IAAhD;IACP,MAAA,GAAS,EAAE,CAAC,SAAH,CAAa,GAAb,EAAkB,IAAlB,EAAwB,IAAxB;IACT,IAAkC,MAAM,CAAC,MAAP,KAAiB,CAAnD;MAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,MAApB,EAAA;;WACA;EAJM;;EAMR,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAAA;;AAAuB;AAAA;IAAA,KAAA,qCAAA;;mBACnB,IAAI,CAAC,OAAL,CAAa,SAAb,EAAwB,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAc,MAAd,CAAA,CAAxB;IADmB,CAAA;;;;EAGvB,MAAA,GAAS,QAAA,CAAC,GAAD,CAAA;WAAS,CAAC,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAD,CAAgB,CAAC,IAAjB,CAAsB,CAAC,QAAA,CAAA,CAAA;aAAM;IAAN,CAAD,CAAtB,EAAmC,CAAC,QAAA,CAAA,CAAA;aAAM;IAAN,CAAD,CAAnC;EAAT;;EAET,IAAA,GAAO,MAAA,QAAA,CAAA,CAAA;IACH,MAAM,MAAA,CAAO,IAAP;IACN,MAAM,GAAG,CAAC,SAAJ,CAAc,IAAd;IAEN,KAAA,CAAM,WAAN,EAAmB,CAAC,OAAD,EAAU,IAAV,CAAnB;IAEA,KAAO,IAAP;MACI,KAAA,CAAM,MAAN,EAAc,CAAC,WAAD,EAAc,MAAd,EAAsB,gBAAtB,CAAd;MAEA,MAAM,MAAA,CAAO,MAAP;MACN,MAAM,GAAG,CAAC,SAAJ,CAAc,IAAd;MACN,MAAM,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAe,MAAf;MACN,MAAM,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAe,IAAf;aAEN,KAAA,CAAM,MAAN,EAAc,CAAC,WAAD,EAAc,OAAd,EAAuB,gBAAvB,CAAd,EARJ;;EANG;;EAgBP,IAAA,CAAA;AA3CA",
  "sourcesContent": [
    "path = require \"path\"\ncp = require \"child_process\"\nxfs = require \"fs-extra\"\nminimist = require \"minimist\"\n\nargs = minimist process.argv[2..]\n{ test } = args\n[ database ] = args._\nprocess.exit 1 unless database\n\ncwd = process.cwd()\nencoding = \"utf8\"\n\nfusekiBase = process.env.FUSEKI_BASE or cwd\ndatabases = path.resolve fusekiBase, \"databases\"\n\nspawn = (cmd, args, opts={}) ->\n  opts = { cwd, encoding, stdio: \"inherit\", shell: true, opts... }\n  result = cp.spawnSync cmd, args, opts\n  process.exit result.status unless result.status is 0\n  result\n\n[backup, dest, live] = for suffix in [\".old\", \".new\", \"\"]\n    path.resolve databases, \"#{database}#{suffix}\"\n\nremove = (dir) -> (xfs.remove dir).then (() -> dir), (() -> dir)\n\nload = () ->\n    await remove dest\n    await xfs.ensureDir dest\n\n    spawn \"tdbloader\", [\"--loc\", dest]\n\n    unless test\n        spawn \"sudo\", [\"systemctl\", \"stop\", \"fuseki.service\"]\n\n        await remove backup\n        await xfs.ensureDir live\n        await xfs.move live, backup\n        await xfs.move dest, live\n\n        spawn \"sudo\", [\"systemctl\", \"start\", \"fuseki.service\"]\n\nload()"
  ]
}